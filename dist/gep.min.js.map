{"version":3,"file":"gep.min.js","sources":["../src/cache.js","../src/index.js"],"sourcesContent":["/**\n * A doubly linked list-based Least Recently Used (LRU)\n * cache. Will keep most recently used items while\n * discarding least recently used items when its limit is\n * reached. This is a bare-bone version of\n * Rasmus Andersson's js-lru:\n *\n *   https://github.com/rsms/js-lru\n *\n * @param {Number} limit\n * @constructor\n */\n\nexport default function Cache (limit) {\n  this.size = 0\n  this.limit = limit\n  this.head = this.tail = undefined\n  this._keymap = Object.create(null)\n}\n\nvar p = Cache.prototype\n\n/**\n * Put <value> into the cache associated with <key>.\n * Returns the entry which was removed to make room for\n * the new entry. Otherwise undefined is returned.\n * (i.e. if there was enough room already).\n *\n * @param {String} key\n * @param {*} value\n * @return {Entry|undefined}\n */\n\np.put = function (key, value) {\n  var removed\n  if (this.size === this.limit) {\n    removed = this.shift()\n  }\n\n  var entry = this.get(key, true)\n  if (!entry) {\n    entry = {\n      key: key,\n    }\n    this._keymap[key] = entry\n    if (this.tail) {\n      this.tail.newer = entry\n      entry.older = this.tail\n    } else {\n      this.head = entry\n    }\n    this.tail = entry\n    this.size++\n  }\n  entry.value = value\n\n  return removed\n}\n\n/**\n * Purge the least recently used (oldest) entry from the\n * cache. Returns the removed entry or undefined if the\n * cache was empty.\n */\n\np.shift = function () {\n  var entry = this.head\n  if (entry) {\n    this.head = this.head.newer\n    this.head.older = undefined\n    entry.newer = entry.older = undefined\n    this._keymap[entry.key] = undefined\n    this.size--\n  }\n  return entry\n}\n\n/**\n * Get and register recent use of <key>. Returns the value\n * associated with <key> or undefined if not in cache.\n *\n * @param {String} key\n * @param {Boolean} returnEntry\n * @return {Entry|*}\n */\n\np.get = function (key, returnEntry) {\n  var entry = this._keymap[key]\n  if (entry === undefined) return\n  if (entry === this.tail) {\n    return returnEntry\n      ? entry\n      : entry.value\n  }\n  // HEAD--------------TAIL\n  //   <.older   .newer>\n  //  <--- add direction --\n  //   A  B  C  <D>  E\n  if (entry.newer) {\n    if (entry === this.head) {\n      this.head = entry.newer\n    }\n    entry.newer.older = entry.older // C <-- E.\n  }\n  if (entry.older) {\n    entry.older.newer = entry.newer // C. --> E\n  }\n  entry.newer = undefined // D --x\n  entry.older = this.tail // D. --> E\n  if (this.tail) {\n    this.tail.newer = entry // E. <-- D\n  }\n  this.tail = entry\n  return returnEntry\n    ? entry\n    : entry.value\n}\n","/**\n * Come from Vue.js v1.0.24\n *\n *   https://github.com/vuejs/vue\n *\n */\n\nimport Cache from './cache.js'\n\nlet $cache\n\nlet allowedKeywordsRE\n\n// keywords that don't make sense inside expressions\nconst improperKeywordsRE =\n  new RegExp(\n    '^('\n    + ('break,case,class,catch,const,continue,debugger,default,'\n      + 'delete,do,else,export,extends,finally,for,function,if,'\n      + 'import,in,instanceof,let,return,super,switch,throw,try,'\n      + 'var,while,with,yield,enum,await,implements,package,'\n      + 'protected,static,interface,private,public'\n    ).replace(/,/g, '\\\\b|')\n    + '\\\\b)'\n  )\n\nconst wsRE = /\\s/g\nconst newlineRE = /\\n/g\nconst saveRE = /[\\{,]\\s*[\\w\\$_]+\\s*:|('(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`)|new |typeof |void /g\nconst restoreRE = /\"(\\d+)\"/g\nconst pathTestRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?'\\]|\\[\".*?\"\\]|\\[\\d+\\]|\\[[A-Za-z_$][\\w$]*\\])*$/\nconst identRE = /[^\\w$\\.](?:[A-Za-z_$][\\w$]*)/g\nconst booleanLiteralRE = /^(?:true|false)$/\n\n/**\n * Save / Rewrite / Restore\n *\n * When rewriting paths found in an expression, it is\n * possible for the same letter sequences to be found in\n * strings and Object literal property keys. Therefore we\n * remove and store these parts in a temporary array, and\n * restore them after the path rewrite.\n */\n\nlet saved = []\n\n/**\n * Save replacer\n *\n * The save regex can match two possible cases:\n * 1. An opening object literal\n * 2. A string\n * If matched as a plain string, we need to escape its\n * newlines, since the string needs to be preserved when\n * generating the function body.\n *\n * @param {String} str\n * @param {String} isString - str if matched as a string\n * @return {String} - placeholder with index\n */\n\nfunction save (str, isString) {\n  var i = saved.length\n  saved[i] = isString\n    ? str.replace(newlineRE, '\\\\n')\n    : str\n  return '\"' + i + '\"'\n}\n\n/**\n * Restore replacer\n *\n * @param {String} str\n * @param {String} i - matched save index\n * @return {String}\n */\n\nfunction restore (str, i) {\n  return saved[i]\n}\n\n/**\n * Check if an expression is a simple path.\n *\n * @param {String} expr\n * @return {Boolean}\n */\n\nfunction isSimplePath (expr) {\n  return pathTestRE.test(expr)\n    // don't treat true/false as paths\n    && !booleanLiteralRE.test(expr)// &&\n    // Math constants e.g. Math.PI, Math.E etc.\n    // && expr.slice(0, 5) !== 'Math.'\n}\n\n/**\n * @param {Object} config\n *   - {Number} cache, default 1000\n *              limited for Cache\n *   - {String} global, default \"_\"\n *              for global string in parsed expression,\n * @constructor\n */\n\nexport default class Gep {\n  constructor ({\n    cache = 1000,\n    global = '_',\n  } = {}) {\n    this.global = global\n    this.scope = '$'\n\n    $cache = new Cache(cache)\n    let allowedKeywords = global + ','\n      + 'Math,Date,this,true,false,null,undefined,Infinity,NaN,'\n      + 'isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,'\n      + 'encodeURIComponent,parseInt,parseFloat'\n    allowedKeywordsRE =\n      new RegExp(\n          '^('\n        + (allowedKeywords).replace(/,/g, '\\\\b|')\n        + '\\\\b)'\n      )\n  }\n\n  /**\n   * Rewrite an expression, prefixing all path accessors with\n   * `scope.` and return the new expression.\n   *\n   * @param {String} expr\n   * @return {String}\n   */\n\n  compile (expr) {\n    if (improperKeywordsRE.test(expr)) {\n      if (process.env.NODE_ENV !== 'production'\n        && console && console.warn\n      ) {\n        console.warn('Avoid using reserved keywords in expression: ' + expr)\n      }\n    }\n    // reset state\n    saved.length = 0\n    // save strings and object literal keys\n    let body = expr\n      .replace(saveRE, save)\n      .replace(wsRE, '')\n    // rewrite all paths\n    // pad 1 space here becaue the regex matches 1 extra char\n    body = (' ' + body)\n      .replace(identRE, (raw) => {\n        let c = raw.charAt(0)\n        let path = raw.slice(1)\n        if (allowedKeywordsRE.test(path)) {\n          return raw\n        } else {\n          path = path.indexOf('\"') > -1\n            ? path.replace(restoreRE, restore)\n            : path\n          return c + this.scope + '.' + path\n        }\n      })\n      .replace(restoreRE, restore)\n    return body\n  }\n\n  /**\n   * Build a getter function. Requires eval.\n   *\n   * We isolate the try/catch so it doesn't affect the\n   * optimization of the parse function when it is not called.\n   *\n   * @param {String} body\n   * @return {Function|undefined}\n   */\n\n  make (body) {\n    try {\n      /* eslint-disable no-new-func */\n      return new Function(\n        this.scope,\n        this.global,\n        'return ' + body + ';'\n      )\n      /* eslint-enable no-new-func */\n    } catch (e) {\n      if (process.env.NODE_ENV !== 'production'\n        && console && console.warn\n      ) {\n        console.warn(\n            'Invalid expression. '\n          + 'Generated function body: ' + body\n        )\n      }\n    }\n  }\n\n  /**\n   * Parse an expression.\n   *\n   * @param {String} expr\n   * @param {Boolean} toFunc\n   *                  make the parsed expression if true\n   * @return {Function}\n   */\n\n  parse (expr, toFunc) {\n    if (!(expr && (expr = expr.trim()))) {\n      return ''\n    }\n    // try cache\n    var hit = $cache.get(expr)\n    if (hit) {\n      return hit\n    }\n    var res = isSimplePath(expr) && expr.indexOf('[') < 0\n      // optimized super simple getter\n      ? this.scope + '.' + expr\n      // dynamic getter\n      : this.compile(expr)\n    $cache.put(expr, res)\n    if (toFunc) {\n      res = this.make(res)\n    }\n    return res\n  }\n}\n"],"names":["Cache","limit","size","head","this","tail","undefined","_keymap","Object","create","save","str","isString","i","saved","length","replace","newlineRE","restore","isSimplePath","expr","pathTestRE","test","booleanLiteralRE","p","prototype","put","key","value","removed","shift","entry","get","newer","older","returnEntry","$cache","allowedKeywordsRE","improperKeywordsRE","RegExp","wsRE","saveRE","restoreRE","identRE","Gep","cache","global","scope","allowedKeywords","process","env","NODE_ENV","console","warn","body","raw","c","charAt","path","slice","indexOf","_this","Function","e","toFunc","trim","hit","res","compile","make"],"mappings":"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"}