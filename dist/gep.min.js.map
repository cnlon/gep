{"version":3,"file":"gep.min.js","sources":["../src/cache.js","../src/index.js"],"sourcesContent":["/**\n * A doubly linked list-based Least Recently Used (LRU)\n * cache. Will keep most recently used items while\n * discarding least recently used items when its limit is\n * reached. This is a bare-bone version of\n * Rasmus Andersson's js-lru:\n *\n *   https://github.com/rsms/js-lru\n *\n * @param {Number} limit\n * @constructor\n */\n\nexport default function Cache (limit) {\n  this.size = 0\n  this.limit = limit\n  this.head = this.tail = undefined\n  this._keymap = Object.create(null)\n}\n\nvar p = Cache.prototype\n\n/**\n * Put <value> into the cache associated with <key>.\n * Returns the entry which was removed to make room for\n * the new entry. Otherwise undefined is returned.\n * (i.e. if there was enough room already).\n *\n * @param {String} key\n * @param {*} value\n * @return {Entry|undefined}\n */\n\np.put = function (key, value) {\n  var removed\n  if (this.size === this.limit) {\n    removed = this.shift()\n  }\n\n  var entry = this.get(key, true)\n  if (!entry) {\n    entry = {\n      key: key,\n    }\n    this._keymap[key] = entry\n    if (this.tail) {\n      this.tail.newer = entry\n      entry.older = this.tail\n    } else {\n      this.head = entry\n    }\n    this.tail = entry\n    this.size++\n  }\n  entry.value = value\n\n  return removed\n}\n\n/**\n * Purge the least recently used (oldest) entry from the\n * cache. Returns the removed entry or undefined if the\n * cache was empty.\n */\n\np.shift = function () {\n  var entry = this.head\n  if (entry) {\n    this.head = this.head.newer\n    this.head.older = undefined\n    entry.newer = entry.older = undefined\n    this._keymap[entry.key] = undefined\n    this.size--\n  }\n  return entry\n}\n\n/**\n * Get and register recent use of <key>. Returns the value\n * associated with <key> or undefined if not in cache.\n *\n * @param {String} key\n * @param {Boolean} returnEntry\n * @return {Entry|*}\n */\n\np.get = function (key, returnEntry) {\n  var entry = this._keymap[key]\n  if (entry === undefined) return\n  if (entry === this.tail) {\n    return returnEntry\n      ? entry\n      : entry.value\n  }\n  // HEAD--------------TAIL\n  //   <.older   .newer>\n  //  <--- add direction --\n  //   A  B  C  <D>  E\n  if (entry.newer) {\n    if (entry === this.head) {\n      this.head = entry.newer\n    }\n    entry.newer.older = entry.older // C <-- E.\n  }\n  if (entry.older) {\n    entry.older.newer = entry.newer // C. --> E\n  }\n  entry.newer = undefined // D --x\n  entry.older = this.tail // D. --> E\n  if (this.tail) {\n    this.tail.newer = entry // E. <-- D\n  }\n  this.tail = entry\n  return returnEntry\n    ? entry\n    : entry.value\n}\n","/*!\n * Come from Vue.js v1.0.24\n *\n *   https://github.com/vuejs/vue\n *\n */\n\nimport Cache from './cache.js'\n\nconst expressionCache = new Cache(1000)\n\nlet scopeKeyword = '$'\nlet globalKeyword = '_'\n\nlet allowedKeywords =\n  'Math,Date,this,true,false,null,undefined,Infinity,NaN,'\n  + 'isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,'\n  + 'encodeURIComponent,parseInt,parseFloat'\nlet allowedKeywordsRE =\n  new RegExp(\n      '^('\n    + (globalKeyword + ',' + allowedKeywords).replace(/,/g, '\\\\b|')\n    + '\\\\b)'\n  )\n\n// keywords that don't make sense inside expressions\nconst improperKeywords =\n    'break,case,class,catch,const,continue,debugger,default,'\n  + 'delete,do,else,export,extends,finally,for,function,if,'\n  + 'import,in,instanceof,let,return,super,switch,throw,try,'\n  + 'var,while,with,yield,enum,await,implements,package,'\n  + 'protected,static,interface,private,public'\nconst improperKeywordsRE =\n  new RegExp('^(' + improperKeywords.replace(/,/g, '\\\\b|') + '\\\\b)')\n\nconst wsRE = /\\s/g\nconst newlineRE = /\\n/g\nconst saveRE = /[\\{,]\\s*[\\w\\$_]+\\s*:|('(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`)|new |typeof |void /g\nconst restoreRE = /\"(\\d+)\"/g\nconst pathTestRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?'\\]|\\[\".*?\"\\]|\\[\\d+\\]|\\[[A-Za-z_$][\\w$]*\\])*$/\nconst identRE = /[^\\w$\\.](?:[A-Za-z_$][\\w$]*)/g\nconst booleanLiteralRE = /^(?:true|false)$/\n\n/**\n * Save / Rewrite / Restore\n *\n * When rewriting paths found in an expression, it is\n * possible for the same letter sequences to be found in\n * strings and Object literal property keys. Therefore we\n * remove and store these parts in a temporary array, and\n * restore them after the path rewrite.\n */\n\nlet saved = []\n\n/**\n * Save replacer\n *\n * The save regex can match two possible cases:\n * 1. An opening object literal\n * 2. A string\n * If matched as a plain string, we need to escape its\n * newlines, since the string needs to be preserved when\n * generating the function body.\n *\n * @param {String} str\n * @param {String} isString - str if matched as a string\n * @return {String} - placeholder with index\n */\n\nfunction save (str, isString) {\n  var i = saved.length\n  saved[i] = isString\n    ? str.replace(newlineRE, '\\\\n')\n    : str\n  return '\"' + i + '\"'\n}\n\n/**\n * Path rewrite replacer\n *\n * @param {String} raw\n * @return {String}\n */\n\nfunction rewrite (raw) {\n  var c = raw.charAt(0)\n  var path = raw.slice(1)\n  if (allowedKeywordsRE.test(path)) {\n    return raw\n  } else {\n    path = path.indexOf('\"') > -1\n      ? path.replace(restoreRE, restore)\n      : path\n    return c + scopeKeyword + '.' + path\n  }\n}\n\n/**\n * Restore replacer\n *\n * @param {String} str\n * @param {String} i - matched save index\n * @return {String}\n */\n\nfunction restore (str, i) {\n  return saved[i]\n}\n\n/**\n * Rewrite an expression, prefixing all path accessors with\n * `scope.` and generate getter/setter functions.\n *\n * @param {String} exp\n * @return {Function}\n */\n\nfunction compileGetter (exp) {\n  if (improperKeywordsRE.test(exp)) {\n    if (process.env.NODE_ENV !== 'production' && console && console.warn) {\n      console.warn('Avoid using reserved keywords in expression: ' + exp)\n    }\n  }\n  // reset state\n  saved.length = 0\n  // save strings and object literal keys\n  var body = exp\n    .replace(saveRE, save)\n    .replace(wsRE, '')\n  // rewrite all paths\n  // pad 1 space here becaue the regex matches 1 extra char\n  body = (' ' + body)\n    .replace(identRE, rewrite)\n    .replace(restoreRE, restore)\n  return makeGetterFn(body)\n}\n\n/**\n * Build a getter function. Requires eval.\n *\n * We isolate the try/catch so it doesn't affect the\n * optimization of the parse function when it is not called.\n *\n * @param {String} body\n * @return {Function|undefined}\n */\n\nfunction makeGetterFn (body) {\n  try {\n    /* eslint-disable no-new-func */\n    return new Function(\n      scopeKeyword,\n      globalKeyword,\n      'return ' + body + ';'\n    )\n    /* eslint-enable no-new-func */\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production' && console && console.warn) {\n      console.warn(\n          'Invalid expression. '\n        + 'Generated function body: ' + body\n      )\n    }\n  }\n}\n\n/**\n * Check if an expression is a simple path.\n *\n * @param {String} exp\n * @return {Boolean}\n */\n\nfunction isSimplePath (exp) {\n  return pathTestRE.test(exp)\n    // don't treat true/false as paths\n    && !booleanLiteralRE.test(exp)// &&\n    // Math constants e.g. Math.PI, Math.E etc.\n    // && exp.slice(0, 5) !== 'Math.'\n}\n\n/**\n * Set global keyword\n *\n * @param {String} key\n */\n\nfunction setGlobal (key) {\n  if (!key) return\n  globalKeyword = key\n  allowedKeywordsRE =\n    new RegExp(\n        '^('\n      + (globalKeyword + ',' + allowedKeywords).replace(/,/g, '\\\\b|')\n      + '\\\\b)'\n    )\n}\n\n/**\n * Parse an expression into re-written getter/setters.\n *\n * @param {String} exp\n * @param {Boolean} needSet\n * @return {Function}\n */\n\nexport default function parseExpression (exp, needSet) {\n  exp = exp.trim()\n  // try cache\n  var hit = expressionCache.get(exp)\n  if (hit) {\n    return hit\n  }\n  var res = isSimplePath(exp) && exp.indexOf('[') < 0\n    // optimized super simple getter\n    ? makeGetterFn(scopeKeyword + '.' + exp)\n    // dynamic getter\n    : compileGetter(exp)\n  expressionCache.put(exp, res)\n  return res\n}\n\nparseExpression.setGlobal = setGlobal\n"],"names":["Cache","limit","size","head","this","tail","undefined","_keymap","Object","create","save","str","isString","i","saved","length","replace","newlineRE","rewrite","raw","c","charAt","path","slice","allowedKeywordsRE","test","indexOf","restoreRE","restore","scopeKeyword","compileGetter","exp","improperKeywordsRE","process","env","NODE_ENV","console","warn","body","saveRE","wsRE","identRE","makeGetterFn","Function","globalKeyword","e","isSimplePath","pathTestRE","booleanLiteralRE","setGlobal","key","RegExp","allowedKeywords","parseExpression","needSet","trim","hit","expressionCache","get","res","put","p","prototype","value","removed","shift","entry","newer","older","returnEntry","improperKeywords"],"mappings":"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"}